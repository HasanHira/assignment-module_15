Assignment: Laravel Concepts Assessment


Instructions:
=============

Complete the following coding tasks independently.

Implement the tasks using Laravel framework and follow best practices.

Submit your solution within the given time frame.

************************


Task 1: Request Validation

Implement request validation for a registration form that contains the following fields: name, email, and password. Validate the following rules:

 
name: required, string, minimum length 2.


email: required, valid email format.


password: required, string, minimum length 8.



---------------------------------------- 1 ---------------------------------------------------

step_1

php artisan make:request RegistrationFormRequest


step_2

<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class RegistrationFormRequest extends FormRequest
{
    public function authorize()
    {
        return true;
    }

    public function rules()
    {
        return [
            'name' => 'required|string|min:2',
            'email' => 'required|email',
            'password' => 'required|string|min:8',
        ];
    }
}


step_3

<?php

namespace App\Http\Controllers;

use App\Http\Requests\RegistrationFormRequest;

class RegistrationController extends Controller
{
    public function register(RegistrationFormRequest $request)
    {
        // Validation passed, continue with registration logic
        // Access form input using $request->input('field_name')
    }
}




 
------------------------------------------ 2 -------------------------------------------------



Task 2: Request Redirect

Create a route /home that redirects to /dashboard using a 302 redirect.


---------------------------------------------------------------------------------------------

step_1

Route::get('/home', function () {
    return redirect('/dashboard');
});


---------------------------------------------------------------------------------------------



Task 3: Global Middleware

Create a global middleware that logs the request method and URL for every incoming request. Log the information to the Laravel log file.


-------------------------------------------- 3 ----------------------------------------------

step_1

php artisan make:middleware LogRequestMiddleware


step_2

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Log;

class LogRequestMiddleware
{
    public function handle($request, Closure $next)
    {
        $method = $request->method();
        $url = $request->url();

        Log::info("Request: $method $url");

        return $next($request);
    }
}


step_3

protected $middleware = [
    // Other middleware...
    \App\Http\Middleware\LogRequestMiddleware::class,
];


---------------------------------------------------------------------------------------------

Task 4: Route Middleware


Create a route group for authenticated users only. This group should include routes for /profile and /settings. Apply a middleware called AuthMiddleware to the route group to ensure only authenticated users can access these routes.


----------------------------------------------- 4 -------------------------------------------

step_1

php artisan make:middleware AuthMiddleware


step_2

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;

class AuthMiddleware
{
    public function handle($request, Closure $next)
    {
        if (!Auth::check()) {
            return redirect('/login');
            // or return response('Unauthorized.', 401);
        }

        return $next($request);
    }
}


step_3

Route::middleware(['auth'])->group(function () {
    Route::get('/profile', 'ProfileController@index');
    Route::get('/settings', 'SettingsController@index');
});


---------------------------------------------------------------------------------------------


Please solve the laravel framwork problem:
Task 5: Controller


Create a controller called ProductController that handles CRUD operations for a resource called Product. Implement the following methods:

index(): Display a list of all products.


create(): Display the form to create a new product.


store(): Store a newly created product.


edit($id): Display the form to edit an existing product.


update($id): Update the specified product.


destroy($id): Delete the specified product.


----------------------------------------------- 5 -------------------------------------------

step_1

php artisan make:controller ProductController --resource


step_2

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;

class ProductController extends Controller
{
    public function index()
    {
        $products = Product::all();
        return view('products.index', compact('products'));
    }

    public function create()
    {
        return view('products.create');
    }

    public function store(Request $request)
    {
        // Validate the input
        $validatedData = $request->validate([
            'name' => 'required|string',
            'price' => 'required|numeric',
            // Add validation rules for other fields
        ]);

        // Create a new product
        $product = Product::create($validatedData);

        // Redirect to the index or show the newly created product
        return redirect()->route('products.index')->with('success', 'Product created successfully.');
    }

    public function edit($id)
    {
        $product = Product::findOrFail($id);
        return view('products.edit', compact('product'));
    }

    public function update(Request $request, $id)
    {
        // Validate the input
        $validatedData = $request->validate([
            'name' => 'required|string',
            'price' => 'required|numeric',
            // Add validation rules for other fields
        ]);

        // Find the product by ID
        $product = Product::findOrFail($id);

        // Update the product
        $product->update($validatedData);

        // Redirect to the index or show the updated product
        return redirect()->route('products.index')->with('success', 'Product updated successfully.');
    }

    public function destroy($id)
    {
        // Find the product by ID
        $product = Product::findOrFail($id);

        // Delete the product
        $product->delete();

        // Redirect to the index or show a success message
        return redirect()->route('products.index')->with('success', 'Product deleted successfully.');
    }
}


step_3

Route::resource('products', 'ProductController');


step_4

Create the Views
Create the necessary views to accompany the controller methods. You'll need the following views:

index.blade.php: Display the list of all products.
create.blade.php: Display the form to create a new product.
edit.blade.php: Display the form to edit an existing product.


---------------------------------------------------------------------------------------------


Task 6: Single Action Controller


Create a single action controller called ContactController that handles a contact form submission. Implement the __invoke() method to process the form submission and send an email to a predefined address with the submitted data.


------------------------------------------------- 6 -----------------------------------------

step_1

php artisan make:controller ContactController --invokable


step_2

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class ContactController extends Controller
{
    public function __invoke(Request $request)
    {
        // Validate the input
        $validatedData = $request->validate([
            'name' => 'required|string',
            'email' => 'required|email',
            'message' => 'required|string',
        ]);

        // Send the email
        Mail::raw($validatedData['message'], function ($message) use ($validatedData) {
            $message->to('contact@example.com')
                ->subject('Contact Form Submission')
                ->from($validatedData['email'], $validatedData['name']);
        });

        // Redirect back or show a success message
        return redirect()->back()->with('success', 'Thank you for your message. We will get back to you soon.');
    }
}


step_3

Route::post('/contact', 'ContactController');


step_4

Create the Contact Form
Create a view file to display the contact form. You can use Laravel's Blade templating engine to create a form that submits a POST request to /contact.


---------------------------------------------------------------------------------------------


Task 7: Resource Controller

Create a resource controller called PostController that handles CRUD operations for a resource called Post. Ensure that the controller provides the necessary methods for the resourceful routing conventions in Laravel.


---------------------------------------------- 7 --------------------------------------------

step_1

php artisan make:controller PostController --resource


step_2

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Post;

class PostController extends Controller
{
    public function index()
    {
        $posts = Post::all();
        return view('posts.index', compact('posts'));
    }

    public function create()
    {
        return view('posts.create');
    }

    public function store(Request $request)
    {
        // Validate the input
        $validatedData = $request->validate([
            'title' => 'required|string',
            'content' => 'required|string',
        ]);

        // Create a new post
        $post = Post::create($validatedData);

        // Redirect to the index or show the newly created post
        return redirect()->route('posts.index')->with('success', 'Post created successfully.');
    }

    public function show($id)
    {
        $post = Post::findOrFail($id);
        return view('posts.show', compact('post'));
    }

    public function edit($id)
    {
        $post = Post::findOrFail($id);
        return view('posts.edit', compact('post'));
    }

    public function update(Request $request, $id)
    {
        // Validate the input
        $validatedData = $request->validate([
            'title' => 'required|string',
            'content' => 'required|string',
        ]);

        // Find the post by ID
        $post = Post::findOrFail($id);

        // Update the post
        $post->update($validatedData);

        // Redirect to the index or show the updated post
        return redirect()->route('posts.index')->with('success', 'Post updated successfully.');
    }

    public function destroy($id)
    {
        // Find the post by ID
        $post = Post::findOrFail($id);

        // Delete the post
        $post->delete();

        // Redirect to the index or show a success message
        return redirect()->route('posts.index')->with('success', 'Post deleted successfully.');
    }
}


step_3

Route::resource('posts', 'PostController');


step_4

Create the Views
Create the necessary views to accompany the controller methods. You'll need the following views:

index.blade.php: Display the list of all posts.
create.blade.php: Display the form to create a new post.
show.blade.php:



---------------------------------------------------------------------------------------------


Please solve the laravel framwork problem:
Task 8: Blade Template Engine


Create a Blade view called welcome.blade.php that includes a navigation bar and a section displaying the text "Welcome to Laravel!".


---------------------------------------------- 8 --------------------------------------------

step_1

Create the View
Create a new file called welcome.blade.php in the resources/views directory. You can use any text editor to create this file.


step_2

<!DOCTYPE html>
<html>
<head>
    <title>Welcome to Laravel</title>
</head>
<body>
    <nav>
        <!-- Your navigation bar HTML code goes here -->
    </nav>

    <section>
        <h1>Welcome to Laravel!</h1>
        <!-- Additional content for the welcome section goes here -->
    </section>
</body>
</html>


step_3

return view('welcome');



---------------------------------------------------------------------------------------------



Submission Instruction :


Please submit your github repository link.